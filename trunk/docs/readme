This is just to create an interpreter for kernel of scheme, We'll extend it by writing a metacircular interpreter in kernel scheme.

Grammer: 

expr :=
      | CHAR    ;charExpr
      | STRING    ;stringExpr
      | NUMBER    ;numberExpr
      | VARIABLE    ; variableExpr
      | LPAREN DEFINE VARIABLE expr RPAREN    ;definitionExpr 
      | LPAREN IF expr expr expr? RPAREN    ;ifExpr
      | LPAREN LAMBDA LPAREN variable* RPAREN expr+ RPAREN    ;lambdaExpr
      | LPAREN variable expr* RPAREN    ;applicationExpr



CHAR := #\any-non-white-space-char
NUMBER := DIGIT(DIGIT)*
DIGIT := 0|1|2|3|4|5|6|7|8|9
STRING := "any-characters"
LPAREN := '('
RPAREN := )
VARIABLE := [^#0-9()] any-non-white-space-char    ;denoted using regex character class


Notes:
 - All the words in all-uppercase letters are terminals.
 - Everything except 0 is a true value.